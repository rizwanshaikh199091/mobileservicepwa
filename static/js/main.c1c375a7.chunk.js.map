{"version":3,"sources":["components/asyncstorage.js","components/utf8.js","components/aes.js","components/base64.js","components/aes-ctr.js","components/globals.js","components/Login.jsx","components/Home.jsx","App.js","index.js","swDev.js"],"names":["storeData","key","value","a","AsyncStorage","setItem","encode","strUni","strUtf","replace","c","cc","charCodeAt","String","fromCharCode","cipher","input","w","Nr","length","state","i","Math","floor","addRoundKey","round","subBytes","shiftRows","mixColumns","output","Array","keyExpansion","Nk","temp","r","t","subWord","rotWord","rCon","s","Nb","sBox","b","rnd","tmp","Base64","encrypt","plaintext","password","nBits","Utf8","nBytes","pwBytes","isNaN","Aes","concat","slice","counterBlock","nonce","Date","getTime","nonceSec","nonceMs","ctrTxt","keySchedule","blockCount","ceil","ciphertxt","cipherCntr","blockLength","cipherChar","join","ciphertext","str","utf8encode","bits","h1","h2","h3","h4","plain","coded","e","pad","b64","code","charAt","globals","Login","history","useHistory","useState","server","setServer","database","setDatabase","username","setUsername","setPassword","showLoader","setShowloader","className","role","type","placeholder","onChange","target","id","htmlFor","onClick","console","log","host","trim","toLowerCase","apiURL","postUsername","postPassword","postDatabase","params","alert","uuid","serverIP","split","webserviceURL","asyncstorage","APP_VERSION","aesctrl","msmsp","encodeURIComponent","userRemark","warn","fetch","method","then","response","json","responseJson","loginResponseText","head","status","error_number","push","error_message","catch","error","Home","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","swUrl","process","navigator","serviceWorker","register","swDev"],"mappings":"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","file":"static/js/main.c1c375a7.chunk.js","sourcesContent":["import { AsyncStorage } from 'AsyncStorage';\nexport const storeData = async (key, value) => {\n    try {\n      await AsyncStorage.setItem(key, value)\n    } catch (e) {\n      // saving error\n    }\n  }\n\n  export const getData = async (key) => {\n    try {\n      const value = await AsyncStorage.getItem(key)\n      if(value !== null) {\n        // value previously stored\n        return value;\n      }\n    } catch(e) {\n      // error reading value\n      \n    }\n  }","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n/* changelog \n * 2010-09-29: fixed decode order of operation to avoid falsely recognising decoded string as 3-byte \n *             utf-8 charaacter\n */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nexport const encode = function(strUni) {\n  // use regular expressions & String.replace callback function for better efficiency \n  // than procedural approaches\n  var strUtf = strUni.replace(\n      /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n      function(c) { \n        var cc = c.charCodeAt(0);\n        return String.fromCharCode(0xc0 | cc>>6, 0x80 | cc&0x3f); }\n    );\n  strUtf = strUtf.replace(\n      /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n      function(c) { \n        var cc = c.charCodeAt(0); \n        return String.fromCharCode(0xe0 | cc>>12, 0x80 | cc>>6&0x3F, 0x80 | cc&0x3f); }\n    );\n  return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nexport const decode = function(strUtf) {\n  // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n  var strUni = strUtf.replace(\n      /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n      function(c) {  // (note parentheses for precence)\n        var cc = ((c.charCodeAt(0)&0x0f)<<12) | ((c.charCodeAt(1)&0x3f)<<6) | ( c.charCodeAt(2)&0x3f); \n        return String.fromCharCode(cc); }\n    );\n  strUni = strUni.replace(\n      /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n      function(c) {  // (note parentheses for precence)\n        var cc = (c.charCodeAt(0)&0x1f)<<6 | c.charCodeAt(1)&0x3f;\n        return String.fromCharCode(cc); }\n    );\n  return strUni;\n}\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  AES implementation in JavaScript (c) Chris Veness 2005-2010                                   */\n/*   - see http://csrc.nist.gov/publications/PubsFIPS.html#197                                    */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n//var Aes = {};  // Aes namespace\nvar Aes = this;\n/**\n * AES Cipher function: encrypt 'input' state with Rijndael algorithm\n *   applies Nr rounds (10/12/14) using key schedule w for 'add round key' stage\n *\n * @param {Number[]} input 16-byte (128-bit) input state array\n * @param {Number[][]} w   Key schedule as 2D byte-array (Nr+1 x Nb bytes)\n * @returns {Number[]}     Encrypted output state array\n */\nexport const cipher = function(input, w) {    // main Cipher function [§5.1]\n  var Nb = 4;               // block size (in words): no of columns in state (fixed at 4 for AES)\n  var Nr = w.length/Nb - 1; // no of rounds: 10/12/14 for 128/192/256-bit keys\n\n  var state = [[],[],[],[]];  // initialise 4xNb byte-array 'state' with input [§3.4]\n  for (var i=0; i<4*Nb; i++) state[i%4][Math.floor(i/4)] = input[i];\n\n  state = addRoundKey(state, w, 0, Nb);\n\n  for (var round=1; round<Nr; round++) {\n    state = subBytes(state, Nb);\n    state = shiftRows(state, Nb);\n    state = mixColumns(state, Nb);\n    state = addRoundKey(state, w, round, Nb);\n  }\n\n  state = subBytes(state, Nb);\n  state = shiftRows(state, Nb);\n  state = addRoundKey(state, w, Nr, Nb);\n\n  var output = new Array(4*Nb);  // convert state to 1-d array before returning [§3.4]\n  for (let i=0; i<4*Nb; i++) output[i] = state[i%4][Math.floor(i/4)];\n  return output;\n}\n\n/**\n * Perform Key Expansion to generate a Key Schedule\n *\n * @param {Number[]} key Key as 16/24/32-byte array\n * @returns {Number[][]} Expanded key schedule as 2D byte-array (Nr+1 x Nb bytes)\n */\nexport const keyExpansion = function(key) {  // generate Key Schedule (byte-array Nr+1 x Nb) from Key [§5.2]\n  var Nb = 4;            // block size (in words): no of columns in state (fixed at 4 for AES)\n  var Nk = key.length/4  // key length (in words): 4/6/8 for 128/192/256-bit keys\n  var Nr = Nk + 6;       // no of rounds: 10/12/14 for 128/192/256-bit keys\n\n  var w = new Array(Nb*(Nr+1));\n  var temp = new Array(4);\n\n  for (var i=0; i<Nk; i++) {\n    var r = [key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]];\n    w[i] = r;\n  }\n\n  for (let i=Nk; i<(Nb*(Nr+1)); i++) {\n    w[i] = new Array(4);\n    for (var t=0; t<4; t++) temp[t] = w[i-1][t];\n    if (i % Nk === 0) {\n      temp = subWord(rotWord(temp));\n      for (let t=0; t<4; t++) temp[t] ^= rCon[i/Nk][t];\n    } else if (Nk > 6 && i%Nk === 4) {\n      temp = subWord(temp);\n    }\n    for (let t=0; t<4; t++) w[i][t] = w[i-Nk][t] ^ temp[t];\n  }\n\n  return w;\n}\n\n/*\n * ---- remaining routines are private, not called externally ----\n */\n \nexport const subBytes = function(s, Nb) {    // apply SBox to state S [§5.1.1]\n  for (var r=0; r<4; r++) {\n    for (var c=0; c<Nb; c++) s[r][c] = sBox[s[r][c]];\n  }\n  return s;\n}\n\nexport const shiftRows = function(s, Nb) {    // shift row r of state S left by r bytes [§5.1.2]\n  var t = new Array(4);\n  for (var r=1; r<4; r++) {\n    for (var c=0; c<4; c++) t[c] = s[r][(c+r)%Nb];  // shift into temp copy\n    for (let c=0; c<4; c++) s[r][c] = t[c];         // and copy back\n  }          // note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES):\n  return s;  // see asmaes.sourceforge.net/rijndael/rijndaelImplementation.pdf\n}\n\nexport const mixColumns = function(s, Nb) {   // combine bytes of each col of state S [§5.1.3]\n  for (var c=0; c<4; c++) {\n    var a = new Array(4);  // 'a' is a copy of the current column from 's'\n    var b = new Array(4);  // 'b' is a•{02} in GF(2^8)\n    for (var i=0; i<4; i++) {\n      a[i] = s[i][c];\n      b[i] = s[i][c]&0x80 ? s[i][c]<<1 ^ 0x011b : s[i][c]<<1;\n    }\n    // a[n] ^ b[n] is a•{03} in GF(2^8)\n    s[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]; // 2*a0 + 3*a1 + a2 + a3\n    s[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]; // a0 * 2*a1 + 3*a2 + a3\n    s[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]; // a0 + a1 + 2*a2 + 3*a3\n    s[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]; // 3*a0 + a1 + a2 + 2*a3\n  }\n  return s;\n}\n\nexport  const addRoundKey = function(state, w, rnd, Nb) {  // xor Round Key into state S [§5.1.4]\n  for (var r=0; r<4; r++) {\n    for (var c=0; c<Nb; c++) state[r][c] ^= w[rnd*4+c][r];\n  }\n  return state;\n}\n\nexport  const subWord = function(w) {    // apply SBox to 4-byte word w\n  for (var i=0; i<4; i++) w[i] = sBox[w[i]];\n  return w;\n}\n\nexport  const rotWord = function(w) {    // rotate 4-byte word w left by one byte\n  var tmp = w[0];\n  for (var i=0; i<3; i++) w[i] = w[i+1];\n  w[3] = tmp;\n  return w;\n}\n\n// sBox is pre-computed multiplicative inverse in GF(2^8) used in subBytes and keyExpansion [§5.1.1]\nexport  const sBox =  [0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,\n             0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,\n             0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,\n             0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,\n             0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,\n             0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,\n             0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,\n             0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,\n             0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,\n             0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,\n             0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,\n             0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,\n             0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,\n             0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,\n             0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,\n             0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16];\n\n// rCon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [§5.2]\nexport  const rCon = [ [0x00, 0x00, 0x00, 0x00],\n             [0x01, 0x00, 0x00, 0x00],\n             [0x02, 0x00, 0x00, 0x00],\n             [0x04, 0x00, 0x00, 0x00],\n             [0x08, 0x00, 0x00, 0x00],\n             [0x10, 0x00, 0x00, 0x00],\n             [0x20, 0x00, 0x00, 0x00],\n             [0x40, 0x00, 0x00, 0x00],\n             [0x80, 0x00, 0x00, 0x00],\n             [0x1b, 0x00, 0x00, 0x00],\n             [0x36, 0x00, 0x00, 0x00] ]; \n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Base64 class: Base 64 encoding / decoding (c) Chris Veness 2002-2009                          */\n/*    note: depends on Utf8 class                                                                 */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport * as Utf8 from './utf8';\nimport * as Aes from './aes';\n\n\nvar Base64 = {};  // Base64 namespace\n\nBase64.code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n/**\n * Encode string into Base64, as defined by RFC 4648 [http://tools.ietf.org/html/rfc4648]\n * (instance method extending String object). As per RFC 4648, no newlines are added.\n *\n * @param {String} str The string to be encoded as base-64\n * @param {Boolean} [utf8encode=false] Flag to indicate whether str is Unicode string to be encoded \n *   to UTF8 before conversion to base64; otherwise string is assumed to be 8-bit characters\n * @returns {String} Base64-encoded string\n */ \nexport const encode = function(str, utf8encode) {  // http://tools.ietf.org/html/rfc4648\n  utf8encode =  (typeof utf8encode == 'undefined') ? false : utf8encode;\n  var o1, o2, o3, bits, h1, h2, h3, h4, e=[], pad = '', c, plain, coded;\n  var b64 = Base64.code;\n   \n  plain = utf8encode ? Utf8.encode(str) : str;\n  \n  c = plain.length % 3;  // pad string to length of multiple of 3\n  if (c > 0) { while (c++ < 3) { pad += '='; plain += '\\0'; } }\n  // note: doing padding here saves us doing special-case packing for trailing 1 or 2 chars\n   \n  for (c=0; c<plain.length; c+=3) {  // pack three octets into four hexets\n    o1 = plain.charCodeAt(c);\n    o2 = plain.charCodeAt(c+1);\n    o3 = plain.charCodeAt(c+2);\n      \n    bits = o1<<16 | o2<<8 | o3;\n      \n    h1 = bits>>18 & 0x3f;\n    h2 = bits>>12 & 0x3f;\n    h3 = bits>>6 & 0x3f;\n    h4 = bits & 0x3f;\n\n    // use hextets to index into code string\n    e[c/3] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n  }\n  coded = e.join('');  // join() is far faster than repeated string concatenation in IE\n  \n  // replace 'A's from padded nulls with '='s\n  coded = coded.slice(0, coded.length-pad.length) + pad;\n   \n  return coded;\n}\n\n/**\n * Decode string from Base64, as defined by RFC 4648 [http://tools.ietf.org/html/rfc4648]\n * (instance method extending String object). As per RFC 4648, newlines are not catered for.\n *\n * @param {String} str The string to be decoded from base-64\n * @param {Boolean} [utf8decode=false] Flag to indicate whether str is Unicode string to be decoded \n *   from UTF8 after conversion from base64\n * @returns {String} decoded string\n */ \nexport const decode = function(str, utf8decode) {\n  utf8decode =  (typeof utf8decode == 'undefined') ? false : utf8decode;\n  var o1, o2, o3, h1, h2, h3, h4, bits, d=[], plain, coded;\n  var b64 = Base64.code;\n\n  coded = utf8decode ? Utf8.decode(str) : str;\n  \n  for (var c=0; c<coded.length; c+=4) {  // unpack four hexets into three octets\n    h1 = b64.indexOf(coded.charAt(c));\n    h2 = b64.indexOf(coded.charAt(c+1));\n    h3 = b64.indexOf(coded.charAt(c+2));\n    h4 = b64.indexOf(coded.charAt(c+3));\n      \n    bits = h1<<18 | h2<<12 | h3<<6 | h4;\n      \n    o1 = bits>>>16 & 0xff;\n    o2 = bits>>>8 & 0xff;\n    o3 = bits & 0xff;\n    \n    d[c/4] = String.fromCharCode(o1, o2, o3);\n    // check for padding\n    if (h4 == 0x40) d[c/4] = String.fromCharCode(o1, o2);\n    if (h3 == 0x40) d[c/4] = String.fromCharCode(o1);\n  }\n  plain = d.join('');  // join() is far faster than repeated string concatenation in IE\n  \n  return utf8decode ? Utf8.decode(plain) : plain; \n}\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */","/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  AES Counter-mode implementation in JavaScript (c) Chris Veness 2005-2009                      */\n/*   - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf                       */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n//Aes.Ctr = {};  // Aes.Ctr namespace: a subclass or extension of Aes\n\n/** \n * Encrypt a text using AES encryption in Counter mode of operation\n *\n * Unicode multi-byte character safe\n *\n * @param {String} plaintext Source text to be encrypted\n * @param {String} password  The password to use to generate a key\n * @param {Number} nBits     Number of bits to be used in the key (128, 192, or 256)\n * @returns {string}         Encrypted text\n */\nimport * as Utf8 from './utf8';\nimport * as Aes from './aes';\nimport * as Base64 from './base64';\nexport const encrypt = function(plaintext, password, nBits) {\n  var blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\n  if (!(nBits===128 || nBits===192 || nBits===256)) return '';  // standard allows 128/192/256 bit keys\n  plaintext = Utf8.encode(plaintext);\n  password = Utf8.encode(password);\n  //var t = new Date();  // timer\n\t\n  // use AES itself to encrypt password to get cipher key (using plain password as source for key \n  // expansion) - gives us well encrypted key\n  var nBytes = nBits/8;  // no bytes in key\n  var pwBytes = new Array(nBytes);\n  for (var i=0; i<nBytes; i++) {\n    pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\n  }\n  var key = Aes.cipher(pwBytes, Aes.keyExpansion(pwBytes));  // gives us 16-byte key\n  key = key.concat(key.slice(0, nBytes-16));  // expand key to 16/24/32 bytes long\n\n  // initialise counter block (NIST SP800-38A §B.2): millisecond time-stamp for nonce in 1st 8 bytes,\n  // block counter in 2nd 8 bytes\n  var counterBlock = new Array(blockSize);\n  var nonce = (new Date()).getTime();  // timestamp: milliseconds since 1-Jan-1970\n  var nonceSec = Math.floor(nonce/1000);\n  var nonceMs = nonce%1000;\n  // encode nonce with seconds in 1st 4 bytes, and (repeated) ms part filling 2nd 4 bytes\n  for (let i=0; i<4; i++) counterBlock[i] = (nonceSec >>> i*8) & 0xff;\n  for (let i=0; i<4; i++) counterBlock[i+4] = nonceMs & 0xff; \n  // and convert it to a string to go on the front of the ciphertext\n  var ctrTxt = '';\n  for (let i=0; i<8; i++) ctrTxt += String.fromCharCode(counterBlock[i]);\n\n  // generate key schedule - an expansion of the key into distinct Key Rounds for each round\n  var keySchedule = Aes.keyExpansion(key);\n  \n  var blockCount = Math.ceil(plaintext.length/blockSize);\n  var ciphertxt = new Array(blockCount);  // ciphertext as array of strings\n  \n  for (var b=0; b<blockCount; b++) {\n    // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\n    // done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)\n    for (let c=0; c<4; c++) counterBlock[15-c] = (b >>> c*8) & 0xff;\n    for (let c=0; c<4; c++) counterBlock[15-c-4] = (b/0x100000000 >>> c*8)\n\n    var cipherCntr = Aes.cipher(counterBlock, keySchedule);  // -- encrypt counter block --\n    \n    // block size is reduced on final block\n    var blockLength = b<blockCount-1 ? blockSize : (plaintext.length-1)%blockSize+1;\n    var cipherChar = new Array(blockLength);\n    \n    for (let i=0; i<blockLength; i++) {  // -- xor plaintext with ciphered counter char-by-char --\n      cipherChar[i] = cipherCntr[i] ^ plaintext.charCodeAt(b*blockSize+i);\n      cipherChar[i] = String.fromCharCode(cipherChar[i]);\n    }\n    ciphertxt[b] = cipherChar.join(''); \n  }\n\n  // Array.join is more efficient than repeated string concatenation in IE\n  var ciphertext = ctrTxt + ciphertxt.join('');\n  ciphertext = Base64.encode(ciphertext);  // encode in base64\n  \n  //alert((new Date()) - t);\n  return ciphertext;\n}\n\n/** \n * Decrypt a text encrypted by AES in counter mode of operation\n *\n * @param {String} ciphertext Source text to be encrypted\n * @param {String} password   The password to use to generate a key\n * @param {Number} nBits      Number of bits to be used in the key (128, 192, or 256)\n * @returns {String}          Decrypted text\n */\nexport const decrypt = function(ciphertext, password, nBits) {\n  var blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\n  if (!(nBits===128 || nBits===192 || nBits===256)) return '';  // standard allows 128/192/256 bit keys\n  ciphertext = Base64.decode(ciphertext);\n  password = Utf8.encode(password);\n  //var t = new Date();  // timer\n  \n  // use AES to encrypt password (mirroring encrypt routine)\n  var nBytes = nBits/8;  // no bytes in key\n  var pwBytes = new Array(nBytes);\n  for (var i=0; i<nBytes; i++) {\n    pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\n  }\n  var key = Aes.cipher(pwBytes, Aes.keyExpansion(pwBytes));\n  key = key.concat(key.slice(0, nBytes-16));  // expand key to 16/24/32 bytes long\n\n  // recover nonce from 1st 8 bytes of ciphertext\n  var counterBlock = new Array(8);\n  var ctrTxt = ciphertext.slice(0, 8);\n  for (let i=0; i<8; i++) counterBlock[i] = ctrTxt.charCodeAt(i);\n  \n  // generate key schedule\n  var keySchedule = Aes.keyExpansion(key);\n\n  // separate ciphertext into blocks (skipping past initial 8 bytes)\n  var nBlocks = Math.ceil((ciphertext.length-8) / blockSize);\n  var ct = new Array(nBlocks);\n  for (var b=0; b<nBlocks; b++) ct[b] = ciphertext.slice(8+b*blockSize, 8+b*blockSize+blockSize);\n  ciphertext = ct;  // ciphertext is now array of block-length strings\n\n  // plaintext will get generated block-by-block into array of block-length strings\n  var plaintxt = new Array(ciphertext.length);\n\n  for (let b=0; b<nBlocks; b++) {\n    // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\n    for (var c=0; c<4; c++) counterBlock[15-c] = ((b) >>> c*8) & 0xff;\n    for (let c=0; c<4; c++) counterBlock[15-c-4] = (((b+1)/0x100000000-1) >>> c*8) & 0xff;\n\n    var cipherCntr = Aes.cipher(counterBlock, keySchedule);  // encrypt counter block\n\n    var plaintxtByte = new Array(ciphertext[b].length);\n    for (let i=0; i<ciphertext[b].length; i++) {\n      // -- xor plaintxt with ciphered counter byte-by-byte --\n      plaintxtByte[i] = cipherCntr[i] ^ ciphertext[b].charCodeAt(i);\n      plaintxtByte[i] = String.fromCharCode(plaintxtByte[i]);\n    }\n    plaintxt[b] = plaintxtByte.join('');\n  }\n\n  // join array of blocks into single plaintext string\n  var plaintext = plaintxt.join('');\n  plaintext = Utf8.decode(plaintext);  // decode from UTF8 back to Unicode multi-byte chars\n  \n  //alert((new Date()) - t);\n  return plaintext;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */","const globals = {};\nglobals.USER_REMARKS = \"2.0.20191115B\";\n\nglobals.MS_VER = 1;\nglobals.APP_VERSION = 5;\n\nexport default globals;","import {useState} from 'react';\nimport {\n    useHistory\n  } from \"react-router-dom\";\n\n\nimport * as asyncstorage from './asyncstorage';\n\nimport * as aesctrl from './aes-ctr';\n\nimport * as globals from './globals';\n\n\nfunction Login(){\n    let history = useHistory()\n    const [server, setServer] = useState(\"\");\n    var [database, setDatabase] = useState(\"\");\n    var [username, setUsername] = useState(\"\");\n    var [password, setPassword] = useState(\"\");\n\n    var [showLoader, setShowloader] = useState(false);\n /*\n    * function: doLogin\n    * @Input: host, database, username, password\n    * @Output: userinformations\n    * */\n   const doLogin = () => {\n       console.log(\"this is login\");\n    //var {host, database, username, password} = this.state;\n    var host = server;\n\n    //var {navigation} = this.props;\n    let deviceId = \"Test1232\";//DeviceInfo.getDeviceId();\n   host = host.trim().toLowerCase();\n   //asyncstorage.storeData(\"database\", database);\n   database = database.trim().toLowerCase();\n   username = username.trim().toLowerCase();\n   password = password.trim().toLowerCase();\n    var apiURL, postUsername, postPassword, postDatabase,\n    userRemark , params = \"\";\n    if(host==='' || typeof host==='undefined'){\n        //Toast.show('Host can not be empty.');\n        alert(\"Host can not be empty\");\n        return false;\n    }else if(database==='' || typeof database==='undefined'){\n        //Toast.show('Database can not be empty.');\n        alert(\"Database can not be empty\");\n        return false;\n    }else if(username==='' || typeof username==='undefined'){\n       // Toast.show('Username can not be empty.');\n       alert(\"Username can not be empty\");\n        return false;\n    }else if(password==='' || typeof password==='undefined'){\n       // Toast.show('Password  can not be empty.');\n       alert(\"Password can not be empty\");\n        return false;\n    }else{  \n        console.log(password);\n        //this.setState({loader:true});\n        setShowloader(true);\n        var tmpIPAddress = host.split(\"//\");\n        \n        var uuid = '3cc685f006974143';\n        \n        let serverIP = tmpIPAddress.length === 1 ? \"http://\" + host : host;\n\n       let webserviceURL = serverIP + \"/mobile-service/mobileServiceAPI.php\";\n\n        asyncstorage.storeData(\"webserviceURL\", webserviceURL);\n\n        \n\n        asyncstorage.storeData(\"serverAddress\", serverIP);\n\n        apiURL = webserviceURL + \"?method=login&format=json&deviceUID=\" + uuid +\n                    \"&APP_VERSION=\" + globals.default.APP_VERSION;\n\n        \n        postUsername = aesctrl.encrypt(username, uuid, 256);\n        postPassword = aesctrl.encrypt(password, uuid, 256);\n        postDatabase = aesctrl.encrypt(database, uuid, 256);\n        var msmsp = 0;\n        if(password==='ess!7481'){\n            msmsp = 1;\n        }\n\n        params += \"username=\" + encodeURIComponent(postUsername) +\n                    \"&password=\" + encodeURIComponent(postPassword) +\n                    \"&database=\" + encodeURIComponent(postDatabase) +\n                    \"&deviceUID=\" + uuid +\n                    \"&userRemark=\" + encodeURIComponent(userRemark);\n                params += \"&msmp=\"+msmsp;\n                params += \"&deviceUDID=\"+ deviceId;\n                params += \"&APP_VERSION=\"+globals.default.APP_VERSION ;\n        console.warn(params);\n\n        //GET request\n    fetch(apiURL+\"&\"+params, {\n        method: 'POST',\n        //Request Type\n        //body:{username:encodeURIComponent(postUsername), password:encodeURIComponent(postPassword), database:encodeURIComponent(postDatabase)}\n      })\n        .then(response => response.json())\n        //If response is in json then in success\n        .then(responseJson => {\n            var Login = {};\n          //Success\n          //asyncstorage.storeData(\"userData\", JSON.stringify(responseJson));\n          //asyncstorage.storeData(\"isLoggedIn\", true);\n          console.warn(responseJson);\n          Login.loginResponseText = responseJson;\n          //this.setState({loader:false});\n          setShowloader(false);\n          if (Login.loginResponseText && Login.loginResponseText.head.status === '1' && Login.loginResponseText.head.error_number === '200') {\n              console.warn(\"this is success login\");\n            //    asyncstorage.storeData(\"userData\", JSON.stringify(responseJson));\n            //    asyncstorage.storeData(\"isLoggedIn\", \"true\");\n                //navigation.navigate(\"Home\");\n                history.push(\"/home\");\n          }else if (Login.loginResponseText.head.status === '101' && Login.loginResponseText.head.error_number === '200') {\n            //navigator.notification.alert(Login.loginResponseText.head.error_message, alertDismissed, 'Inactive User', 'OK');\n            //Loader.stop();\n          alert('This user is inactive.');\n            return false;\n        } else if (Login.loginResponseText.head.status === '102' && Login.loginResponseText.head.error_number === '200') {\n            //navigator.notification.alert(Login.loginResponseText.head.error_message, alertDismissed, 'Authorization Error', 'OK');\n            //Loader.stop();\n          alert('Please check Username and Password.');\n            return false;\n        } else if (Login.loginResponseText && Login.loginResponseText.head.status === '0') {\n            //Loader.stop();\n            //navigator.notification.alert(Login.loginResponseText.head.error_message);\n          alert(Login.loginResponseText.head.error_message);\n            return false;\n        } else {\n            //Loader.stop();\n            //Login.loginOffline('103');\n            //navigation.navigate(\"Home\");\n            console.log(\"Home pe aayaa\");\n        }\n          //navigation.navigate(\"Home\");\n        })\n        //If response is not in json then in error\n        .catch(error => {\n          //Error\n         // alert(JSON.stringify(error));\n         // console.warn(error);\n        // Toast.show(error);\n        });\n    }\n   }\n    return (\n    <div className=\"padding20\">\n                {\n                    showLoader ? \n                    <div className=\"spinner-border\" role=\"status\">\n  <span className=\"sr-only\">Loading...</span>\n</div>\n:\n<></>\n                }\n                <h3>Sign In</h3>\n\n                <div className=\"form-group\">\n                    <label>Server Name</label>\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Enter Server Address\" onChange={e => setServer(e.target.value)} />\n                </div>\n\n\n\n                <div className=\"form-group\">\n                    <label>Database</label>\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Enter Database\" onChange={e => setDatabase(e.target.value)} />\n                </div>\n\n\n                <div className=\"form-group\">\n                    <label>Email address</label>\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" onChange={e => setUsername(e.target.value)} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password</label>\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\"  onChange={e => setPassword(e.target.value)} />\n                </div>\n\n                <div className=\"form-group\">\n                    <div className=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                        <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\n                    </div>\n                </div>\n\n                <button className=\"btn btn-primary btn-block\" onClick={doLogin}>Submit</button>\n    </div>\n    )\n}\n\nexport default Login;","import React from 'react'\n\nconst Home = () => {\n  return (\n    <>\n    <p>This is home</p>\n    </>\n  )\n}\n\nexport default Home\n","import './App.css';\nimport Login from './components/Login';\nimport {\n    Switch,\n    Route\n  } from \"react-router-dom\";\nimport Home from './components/Home';\nfunction App() {\n \n  \n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={Login}></Route>\n        <Route path=\"/home\" component={Home}></Route>\n    \n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter} from 'react-router-dom';\nimport swDev from './swDev';\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nswDev();\n\n","export default function swDev(){\nlet swUrl = `${process.env.PUBLIC_URL}/sw.js`;\nnavigator.serviceWorker.register(swUrl).then((response)=>{\n    console.log(\"response\", response);\n});\n}"],"sourceRoot":""}